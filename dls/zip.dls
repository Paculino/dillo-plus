#!/bin/sh

function display_main_page {
    local path="$1"
    cat << EOF
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8

<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>DLS ZIP</TITLE>
</HEAD>
<BODY><H1>DLS ZIP Main Page</H1>
<em>This DLS is a viewer for ZIP files</em>
<p>Choose a file to start:</p>
<form>
<input name="path" placeholder="ZIP file path" value="$path" />
<input type=submit />
</form>
<p>Note: the command <b>unzip</b> (or <b>7z</b>) must be present on the system</p>
</BODY></HTML>
EOF
}

function display_directory_listing {
    local url="$1"
    local rows="$2"
    cat << EOF
HTTP/1.1 200 OK
Content-Type: text/html; charset=UTF-8

<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>${url}</TITLE>
</HEAD>
<BODY><H1>Directory listing of ${url}</H1>
<br><br>
<table border=0 cellpadding=1 cellspacing=0 bgcolor=#E0E0E0 width=100%>
<tr align=center><td width=60%><b>Filename</b><td><b>Size</b><td><b>Modified&nbsp;at</b>
${rows}
</table>
</BODY></HTML>
EOF
}

function display_error {
    local error="$1"
    cat <<EOF
HTTP/1.1 500 Execution Error
Content-Type: text/html

${error}
EOF
}

function get_mime_type {
    # Get mime type based on filename
    local filename="$1"
    case "$filename" in
	*.html | *.xhtml)
	    echo 'text/html';;
	*.xml | *.ncx | *.opf)
	    echo 'text/xml';;
	*.txt)
	    echo 'text/plain';;
	*.css)
	    echo 'text/css';;
	*.js)
	    echo 'text/javascript';;
	*.png)
	    echo 'image/png';;
	*.jpg | *.jpeg)
	    echo 'image/jpeg';;
	*.gif)
	    echo 'image/gif';;
	*)
	    echo 'application/octet-stream';;
    esac
}

function url_decode {
    sed -e 's|+| |g' -e 's|%|\\\\x|g' | xargs printf
}

function parse_path_param {
    # Extract file path from URL params
    echo "$1" | egrep -o '^path=([^&]+)' | url_decode | cut -d '=' -f 2
}

function parse_subpath_param {
    # Extract file path from URL params
    echo "$1" | egrep -o '&subpath=([^&]+)' | url_decode | cut -d '=' -f 2
}

function unzip_file {
    local path="$1"
    local subpath="$2"
    if which 7z >/dev/null 2>/dev/null; then
        7z x -so "$path" "$subpath"
    else
        unzip -p "$path" "$subpath"
    fi
}

function display_subfile {
    local path="$1"
    local subpath="$2"
    local mime=`get_mime_type "$2"`
    if [ "$mime" = "application/octet-stream" ]; then
	# second check using file content
	if unzip_file "$path" "$subpath" | file - | grep ' text' > /dev/null; then
	    mime=text/plain
	fi
    fi
    cat <<EOF
HTTP/1.1 200 OK
Content-Type: ${mime}

EOF
    unzip_file "$path" "$subpath"
}

function get_subfiles_listing_rows {
    local path="$1"
    if which 7z >/dev/null 2>/dev/null; then
        7z l "$path" | egrep '^[0-9]{4}-[0-9]{2}-[0-9]{2}[ ]+' | egrep -v '[0-9]+ files$' | awk '
        {
            subpath=""
            for (i=6; i<=NF; i++) { subpath=subpath $i; subpath=subpath (i<NF ? OFS : "") }

            printf "<tr align=center bgcolor=%s>", (NR % 2 == 0 ? "" : "#dcdcdc")
            printf "<td align=left><a href=\"?path=%s&subpath=%s\">%s</a>", "'"$path"'",subpath, subpath
            printf "<td>%s&nbsp;bytes", $4
            printf "<td>%s %s", $1, $2
            print "</tr>"
        }'
    else
        unzip -l "$path" | egrep '^[ ]*[0-9]+[ ]+[0-9]{2}-[0-9]{2}-[0-9]{4}[ ]+' | awk '
        {
            subpath=""
            for (i=4; i<=NF; i++) { subpath=subpath $i; subpath=subpath (i<NF ? OFS : "") }

            printf "<tr align=center bgcolor=%s>", (NR % 2 == 0 ? "" : "#dcdcdc")
            printf "<td align=left><a href=\"?path=%s&subpath=%s\">%s</a>", "'"$path"'",subpath, subpath
            printf "<td>%s&nbsp;bytes", $1
            printf "<td>%s %s", $2, $3
            print "</tr>"
        }'
    fi
}

FILEPATH=`parse_path_param "$1"`
SUBPATH=`parse_subpath_param "$1"`

if [ ! -f "$FILEPATH" ]; then
    display_main_page "$FILEPATH"
elif [ -n "$FILEPATH" ] && [ -n "$SUBPATH" ]; then
    display_subfile "$FILEPATH" "$SUBPATH"
else
    ROWS=`get_subfiles_listing_rows "$FILEPATH"`
    display_directory_listing "$FILEPATH" "$ROWS"
fi
