#!/usr/bin/env python3

import sys
import time
import datetime
import traceback
import feedparser
import urllib.parse

MAIN_PAGE_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>DLS RSS</TITLE>
</HEAD>
<BODY><H1>DLS RSS Main Page</H1>
<em>This DLS is a viewer for RSS feeds</em>
<p>Insert an RSS feed URL:</p>
<form>
<input name="feed" placeholder="RSS feed URL" />
<input type=submit />
</form>
</table>
</BODY></HTML>
"""

FEED_PAGE_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>{title}</TITLE>
</HEAD>
<BODY>
<h1>{title}</h1>
{posts}
</BODY></HTML>
"""

FEED_POST_TEMPLATE = """
<h2>{title}</h2>
<p><em>{date}</em></p>
<p><a href="{url}">Link to article</a></p>
<p>
{content}
</p>
"""

def parse_url_params(str_params):
	"""Parse URL's parameters into a dictionary"""

	if len(str_params) == 0:
		return {}

	return { name: urllib.parse.unquote_plus(value)
		 for name, value
		 in [
			 tuple(par.split('='))
			 for par in str_params.split('&')
		 ]}

class RssPost(object):
	"""Class representing a single RSS post."""

	def __init__(self, url, title, date, content):
		self.url = url
		self.title = title
		self.date = date
		self.content = content

	def render(self):
		return FEED_POST_TEMPLATE.format(
			title=self.title,
			date=self.date.strftime("%Y-%m-%d %H:%M:%S"),
			url=self.url,
			content=self.content
		)

class RssDls(object):
	"""DLS to retrieve and format RSS feeds."""

	def __init__(self, url, str_params=""):
		self.url = url
		self.params = parse_url_params(str_params)
		print("DLS INIT: ", self.url, self.params, file=sys.stderr)

	def output_main_page(self):
		"""Outputs the main page of the DLS"""

		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n", end="")
		print(MAIN_PAGE_TEMPLATE, end="")

	def retrieve_feed(self):
		"""Retrieves all RSS posts from a feed"""

		self.feed = feedparser.parse(self.params['feed'])

		posts = []

		for post in self.feed.entries:
			content = post.summary

			if (post.get('content')):
				content=post.content[0].value

			posts.append(RssPost(
				title=post.title,
				date=datetime.datetime.fromtimestamp(time.mktime(post.published_parsed)),
				url=post.link,
				content=content
			))

		return posts

	def render_posts(self, posts):
		"""Renders the list of RSS posts"""

		rendered_posts = [post.render() for post in posts]
		
		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n",
		      end="")

		sys.stdout.flush()
		print(FEED_PAGE_TEMPLATE.format(
			title=self.feed.channel.title,
			posts='\n<hr/>\n'.join(rendered_posts)
		))

	def run_dls(self):
		"""Main feed reader method"""

		if len(self.params.get('feed','')) == 0:
			self.output_main_page()

		else:
                        posts = self.retrieve_feed()
                        self.render_posts(posts)

def retrieve_posts(params):
	return RssDls("dls:rss", params).retrieve_feed()

def main():
	
	try:

		url = "dls:rss"
		params = ""

		if len(sys.argv) > 1:
			params = sys.argv[1]

		rss_dls = RssDls(url, params)
		rss_dls.run_dls()

	except Exception as e:
		print("HTTP/1.1 500 Execution Error\r\nContent-Type: text/html\r\n\r\n", end="")
		print("<b>Execution error:</b> ", end="")
		print(e)
		print("<br/><pre>")
		traceback.print_exc(file=sys.stdout)
		print("</pre>")

if __name__ == "__main__":
	main()
