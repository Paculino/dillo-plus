#!/usr/bin/env python3

import re
import sys
import requests
import traceback
import urllib.parse

MAIN_PAGE_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>DLS Telegram</TITLE>
</HEAD>
<BODY><H1>DLS Telegram Main Page</H1>
<em>This DLS is a viewer for Telegram channels</em>
<p>Insert a Telegram URL:</p>
<form>
<input name="url" placeholder="https://t.me/s/channel_name/" />
<input type=submit />
</form>
</table>
</BODY></HTML>
"""

PAGE_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>{title}</TITLE>
</HEAD>
<BODY>
<h1>{title}</h1>
<p><b>Source:</b> <a href="{url}">{channel}</a></p>
<p>{page_img}</p>
</center>
<br/>
{posts}
<br/>
</BODY></HTML>
"""

POST_TEMPLATE = """
<div style="border-left: 1px solid gray; padding-left: 1em">
<p><b>Post:</b> <a href="https://t.me/s/{url}">{url}</a> <b>Date:</b> <em>{date}</em></p>
{content}
</div>
"""

REPLY_TEXT_TEMPLATE = """
<p style="border-left: 1px solid gray; padding-left: 1em">{reply_text}</p>
"""

IMG_TEMPLATE = """
<p><img width=600 src="{img}" style="border: 1px solid grey"/></p>
"""

VIDEO_TEMPLATE = """
<p><a href="{video}">{video_alt}</a></p>
"""

TEXT_TEMPLATE = """
<p>{text}</p>
"""

def parse_url_params(str_params):
	"""Parse URL's parameters into a dictionary"""

	if len(str_params) == 0:
		return {}

	return { name: urllib.parse.unquote_plus(value)
		 for name, value
		 in [
			 tuple(par.split('='))
			 for par in str_params.split('&')
		 ]}

class TelegramDls(object):

	def __init__(self, url, str_params=""):
		self.url = url
		self.params = parse_url_params(str_params)
		print("DLS INIT: ", self.url, self.params, file=sys.stderr)

	def sanitize_text(self, text):
		text = re.sub('</?div[^>]+>', '', text)
		text = text.replace("<i class=\"emoji\" style=\"background-image:url('", "<img style=\"width: 1em\" src=\"https:")
		text = text.replace("')\">", "\">")
		text = re.sub('<b>.{1,2}</b></i>', '', text)
		return text

	def output_main_page(self):
		"""Outputs the main page of the DLS"""

		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n", end="")
		print(MAIN_PAGE_TEMPLATE, end="")

	def output_channel(self):
		"""Outputs the content of the channel"""

		text = requests.get(self.params['url']).text

		title = re.search('<title>([^<]+)</title>', text).groups()[0]
		page_img = re.search('(<img [^>]+>)', text).groups()[0]

		posts = []

		for post_text in text.split('tgme_widget_message_wrap')[1:]:
			reply_text_s = re.search('"tgme_widget_message_text js-message_reply_text[^>]+>(.+?)</div>', post_text)
			text_s = re.search('"tgme_widget_message_text js-message_text[^>]+>(.+?)</div>', post_text)
			imgs_s = re.findall("tgme_widget_message_photo_wrap [^>]+background-image:url\\('([^']+)'", post_text)
			video_s = re.search('<video src="([^"]+)"', post_text)
			url_s = re.search('data-post="([^"]+)"', post_text)
			date_s = re.search('datetime="([^"]+)"', post_text)

			contents = []

			if reply_text_s:
				contents.append(REPLY_TEXT_TEMPLATE.format(
					reply_text=self.sanitize_text(reply_text_s.groups()[0])
				))

			for img_url in imgs_s:
				contents.append(IMG_TEMPLATE.format(
					img=img_url
				))

			if video_s:
				contents.append(VIDEO_TEMPLATE.format(
					video=video_s.groups()[0],
					video_alt="Download video"
				))

			if text_s:
				contents.append(TEXT_TEMPLATE.format(
					text=self.sanitize_text(text_s.groups()[0])
				))

			url = ''
			if url_s:
				url = url_s.groups()[0]

			date = ''
			if date_s:
				date = date_s.groups()[0]

			posts.append(POST_TEMPLATE.format(
				url=url,
				date=date.split('+')[0].replace('T', ' '),
				content='\n'.join(contents)
			))
			
		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n",
		      end="")

		sys.stdout.flush()

		posts.reverse()

		posts_text = "<p>No posts found</p>"
		if posts:
			posts_text = '\n<br/>\n'.join(posts)
                
		print(PAGE_TEMPLATE.format(
                        title=title,
                        page_img=page_img,
                        url=self.params['url'],
                        channel=self.params['url'].split('/s/')[1].replace('/',''),
                        posts=posts_text
                ))

	def get_channel(self):
		"""Main method"""

		if len(self.params.get('url','')) == 0:
			self.output_main_page()

		else:
                        self.output_channel()

def main():
	
	try:

		url = "dls:telegram"
		params = ""

		if len(sys.argv) > 1:
			params = sys.argv[1]

		telegram_dls = TelegramDls(url, params)
		telegram_dls.get_channel()

	except Exception as e:
		print("HTTP/1.1 500 Execution Error\r\nContent-Type: text/html\r\n\r\n", end="")
		print("<b>Execution error:</b> ", end="")
		print(e)
		print("<br/><pre>")
		traceback.print_exc(file=sys.stdout)
		print("</pre>")

if __name__ == "__main__":
	main()
