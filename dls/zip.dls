#!/usr/bin/env python3

import sys
import zipfile
import traceback
import urllib.parse

MAIN_PAGE_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>DLS ZIP</TITLE>
</HEAD>
<BODY><H1>DLS ZIP Main Page</H1>
<em>This DLS is a viewer for ZIP files</em>
<p>Choose a file to start:</p>
<form>
<input name="path" placeholder="ZIP file path" />
<input type=submit />
</form>
</table>
</BODY></HTML>
"""

DIRECTORY_LISTING_TEMPLATE = """
<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
<HTML>
<HEAD>
 <TITLE>{url}</TITLE>
</HEAD>
<BODY><H1>Directory listing of {url}</H1>
<br><br>
<table border=0 cellpadding=1 cellspacing=0 bgcolor=#E0E0E0 width=100%>
<tr align=center><td><td width=60%><b>Filename</b><td><b>Type</b><td><b>Size</b><td><b>Modified&nbsp;at</b>
{rows}
</table>
</BODY></HTML>
"""

ROW_TEMPLATE = """
<tr align=center bgcolor={bgcolor}><td>{dirsym}<td align=left><a href="{href}">{name}</a><td>{type}<td>{size}&nbsp;bytes<td>{date}
"""

ROW_COLORS = [ "#dcdcdc", "" ]

def get_mime_type(filename):
	"""Get mime type based on filename"""

	if filename.endswith('.html') or filename.endswith('.xhtml'):
		return 'text/html'

	if filename.endswith('.xml') or filename.endswith('.ncx') or filename.endswith('.opf'):
		return 'text/xml'

	elif filename.endswith('.txt'):
		return 'text/plain'

	elif filename.endswith('.css'):
		return 'text/css'

	elif filename.endswith('.png'):
		return 'image/png'

	elif filename.endswith('.jpg') or filename.endswith('.jpeg'):
		return 'image/jpeg'

	elif filename.endswith('.gif'):
		return 'image/gif'

	return 'application/octet-stream'

def parse_url_params(str_params):
	"""Parse URL's parameters into a dictionary"""

	if len(str_params) == 0:
		return {}

	return { name: urllib.parse.unquote_plus(value)
		 for name, value
		 in [
			 tuple(par.split('='))
			 for par in str_params.split('&')
		 ]}

class ZipDls(object):

	def __init__(self, url, str_params=""):
		self.url = url
		self.params = parse_url_params(str_params)
		print("DLS INIT: ", self.url, self.params, file=sys.stderr)

	def make_url(self, path, subpath, curr_subpath=''):
		"""Makes a relative URL for the DLS"""

		def solve_path(path):
			pieces = []

			for piece in path.split('/'):
				if len(piece) == 0 or piece == '.':
					continue
				elif piece == '..':
					try:
						pieces.pop()
					except:
						pass
				else:
					pieces.append(piece)

			return '/'.join(pieces)
		
		return (
			self.url +
			"?path=" + urllib.parse.quote_plus(path) +
			"&subpath=" + urllib.parse.quote_plus(
				solve_path(curr_subpath + '/../' + subpath)
			)
		)
		
	def extract_file_data(self, subpath):
		"""Returns the data of a file contained in the ZIP archive"""

		with self.zip_file.open(subpath) as subfile:
			return subfile.read()

	def output_main_page(self):
		"""Outputs the main page of the DLS"""

		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n", end="")
		print(MAIN_PAGE_TEMPLATE, end="")

	def output_subfile_content(self):
		"""Outputs the content of a file of the ZIP archive"""

		type = get_mime_type(self.params['subpath'])
		buffer = self.extract_file_data(self.params['subpath'])
		
		print(("HTTP/1.1 200 OK\r\nContent-Type: {}\r\n" +
		       "Content-Length: {}\r\n\r\n").format(type, len(buffer)),
		      end="")

		sys.stdout.flush()
		sys.stdout.buffer.write(buffer)

	def output_archive_listing(self):
		"""Outputs directory listing of the archive"""

		inner_files = self.zip_file.infolist()
		rows = []
		i = 0

		for inner_file in inner_files:

			dirsym = ""
			type = get_mime_type(inner_file.filename)

			if inner_file.is_dir():
				dirsym = ">"
				type = "Directory"

			rows.append(ROW_TEMPLATE.format(
				bgcolor=ROW_COLORS[i],
				dirsym=dirsym,
				href=self.make_url(self.params['path'], inner_file.filename),
				name=inner_file.filename,
				type=type,
				size=inner_file.file_size,
				date="{:04d}-{:02d}-{:02d} {:02d}:{:02d}:{:02d}".format(
					inner_file.date_time[0], inner_file.date_time[1],
					inner_file.date_time[2], inner_file.date_time[3],
					inner_file.date_time[4], inner_file.date_time[5]
				)
			))

			i = (i + 1) % len(ROW_COLORS)

		print("HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n", end="")
		print(DIRECTORY_LISTING_TEMPLATE.format(url=self.params['path'],
							rows='\n'.join(rows)), end="")
		
	def get_file_info(self):
		"""Get zip file info"""

		if len(self.params.get('path','')) == 0:
			self.output_main_page()

		else:
			self.zip_file = zipfile.ZipFile(self.params['path'])
			print("DLS OPENED ZIP: ", self.zip_file, file=sys.stderr)

			if len(self.params.get('subpath','')) > 0:
				self.output_subfile_content()

			else:
				self.output_archive_listing()


def main():
	
	try:

		url = "dls:zip"
		params = ""

		if len(sys.argv) > 1:
			params = sys.argv[1]

		zip_dls = ZipDls(url, params)
		zip_dls.get_file_info()

	except Exception as e:
		print("HTTP/1.1 500 Execution Error\r\nContent-Type: text/html\r\n\r\n", end="")
		print("<b>Execution error:</b> ", end="")
		print(e)
		print("<br/><pre>")
		traceback.print_exc(file=sys.stdout)
		print("</pre>")

if __name__ == "__main__":
	main()
